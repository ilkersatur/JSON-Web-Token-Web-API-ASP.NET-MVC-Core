services.AddAuthentication(x=> {
                x.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
                x.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
            }).AddJwtBearer(x=> {
                x.RequireHttpsMetadata = false;
                x.SaveToken = true;
                x.TokenValidationParameters = new TokenValidationParameters() {
                    ValidateIssuerSigningKey=true,
                    ValidateIssuer = false,
                    ValidateAudience=false,
                    IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(key))
                };
            });


var tokenHandler = new JwtSecurityTokenHandler();
                var bytKey = Encoding.UTF8.GetBytes(_key);

                var tokenDesc = new SecurityTokenDescriptor() {
                    Subject = new ClaimsIdentity(new Claim[] { new Claim(ClaimTypes.Name, userName) }),
                    Expires = DateTime.Now.AddHours(1),
                    SigningCredentials = new SigningCredentials( new SymmetricSecurityKey(bytKey),SecurityAlgorithms.HmacSha256Signature)
                };

                var token = tokenHandler.CreateToken(tokenDesc);
                result = tokenHandler.WriteToken(token);